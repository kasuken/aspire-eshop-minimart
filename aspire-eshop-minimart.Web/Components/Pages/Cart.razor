@page "/cart"
@using aspire_eshop_minimart.Web
@using aspire_eshop_minimart.Web.Services
@inject CartService CartService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Shopping Cart - Aspire eShop Minimart</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid AlignItems="Center.Center" Class="mb-4">
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h4">Shopping Cart</MudText>
        </MudItem>
        <MudItem xs="12" md="6" Class="text-right">
            <MudButton Variant="Variant.Outlined" 
                       StartIcon="@Icons.Material.Filled.ArrowBack"
                       Href="/products"
                       Color="Color.Primary">
                Continue Shopping
            </MudButton>
        </MudItem>
    </MudGrid>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" 
                  ShowCloseIcon="true" 
                  CloseIconClicked="() => errorMessage = null"
                  Class="mb-4">
            @errorMessage
        </MudAlert>
    }

    @if (isLoading)
    {
        <MudGrid Justify="Justify.Center" Class="pa-8">
            <MudItem Class="text-center">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                <MudText Typo="Typo.h6" Class="mt-4">Loading your cart...</MudText>
            </MudItem>
        </MudGrid>
    }
    else if (cartItems == null || !cartItems.Any())
    {
        <MudPaper Class="pa-8" Elevation="2">
            <MudGrid Justify="Justify.Center">
                <MudItem Class="text-center">
                    <MudIcon Icon="@Icons.Material.Filled.RemoveShoppingCart" Style="font-size: 4rem;" Color="Color.Dark" />
                    <MudText Typo="Typo.h5" Color="Color.Dark" Class="mt-3">Your cart is empty</MudText>
                    <MudText Typo="Typo.body1" Color="Color.Dark" Class="mb-4">Add some products to get started!</MudText>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.ShoppingBag"
                               Href="/products"
                               Size="Size.Large">
                        Start Shopping
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" lg="8">
                <MudPaper Elevation="2">
                    <MudToolBar>
                        <MudText Typo="Typo.h6">Cart Items (@cartItems.Sum(i => i.Quantity) items)</MudText>
                        <MudSpacer />
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   OnClick="ClearCart"
                                   Size="Size.Small">
                            Clear Cart
                        </MudButton>
                    </MudToolBar>
                    <MudDivider />
                    
                    @foreach (var item in cartItems)
                    {
                        <div class="pa-4">
                            <MudGrid AlignItems="Center.Center">
                                <MudItem xs="12" sm="2">
                                    <MudImage Src="@item.Product.ImageUrl" 
                                              Alt="@item.Product.Name" 
                                              Width="80" 
                                              Height="80"
                                              ObjectFit="ObjectFit.Cover"
                                              Class="rounded" />
                                </MudItem>
                                <MudItem xs="12" sm="4">
                                    <MudText Typo="Typo.h6" Class="mb-1">@item.Product.Name</MudText>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Secondary" Variant="Variant.Outlined">
                                        @item.Product.Category.Name
                                    </MudChip>
                                    <MudText Typo="Typo.body2" Color="Color.Dark" Class="mt-1">
                                        $@item.Product.Price.ToString("F2") each
                                    </MudText>
                                </MudItem>
                                <MudItem xs="12" sm="3">
                                    <MudGrid AlignItems="Center.Center" Justify="Justify.Center">
                                        <MudItem>
                                            <MudIconButton Icon="@Icons.Material.Filled.Remove"
                                                           Color="Color.Primary"
                                                           Size="Size.Small"
                                                           OnClick="() => UpdateQuantity(item.Id, item.Quantity - 1)" />
                                        </MudItem>
                                        <MudItem>
                                            <MudTextField @bind-Value="@quantityValues[item.Id]"
                                                          Variant="Variant.Outlined"
                                                          Style="width: 80px;"
                                                          InputType="InputType.Number"
                                                          OnBlur="() => UpdateQuantityFromInput(item.Id, quantityValues[item.Id])" />
                                        </MudItem>
                                        <MudItem>
                                            <MudIconButton Icon="@Icons.Material.Filled.Add"
                                                           Color="Color.Primary"
                                                           Size="Size.Small"
                                                           OnClick="() => UpdateQuantity(item.Id, item.Quantity + 1)" />
                                        </MudItem>
                                    </MudGrid>
                                </MudItem>
                                <MudItem xs="12" sm="2" Class="text-center">
                                    <MudText Typo="Typo.h6" Color="Color.Primary">
                                        $@((item.Product.Price * item.Quantity).ToString("F2"))
                                    </MudText>
                                </MudItem>
                                <MudItem xs="12" sm="1" Class="text-center">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Color="Color.Error"
                                                   Size="Size.Small"
                                                   OnClick="() => RemoveItem(item.Id)" />
                                </MudItem>
                            </MudGrid>
                        </div>
                        @if (item != cartItems.Last())
                        {
                            <MudDivider />
                        }
                    }
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12" lg="4">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Order Summary</MudText>
                    
                    <MudGrid Class="mb-2">
                        <MudItem xs="8">
                            <MudText>Items (@cartItems.Sum(i => i.Quantity)):</MudText>
                        </MudItem>
                        <MudItem xs="4" Class="text-right">
                            <MudText>$@subtotal.ToString("F2")</MudText>
                        </MudItem>
                    </MudGrid>
                    
                    <MudGrid Class="mb-2">
                        <MudItem xs="8">
                            <MudText>Shipping:</MudText>
                        </MudItem>
                        <MudItem xs="4" Class="text-right">
                            <MudText Color="Color.Success">Free</MudText>
                        </MudItem>
                    </MudGrid>
                    
                    <MudGrid Class="mb-3">
                        <MudItem xs="8">
                            <MudText>Tax:</MudText>
                        </MudItem>
                        <MudItem xs="4" Class="text-right">
                            <MudText>$@tax.ToString("F2")</MudText>
                        </MudItem>
                    </MudGrid>
                    
                    <MudDivider Class="mb-3" />
                    
                    <MudGrid Class="mb-4">
                        <MudItem xs="8">
                            <MudText Typo="Typo.h6">Total:</MudText>
                        </MudItem>
                        <MudItem xs="4" Class="text-right">
                            <MudText Typo="Typo.h6" Color="Color.Primary">$@total.ToString("F2")</MudText>
                        </MudItem>
                    </MudGrid>
                    
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Success" 
                               FullWidth="true"
                               StartIcon="@Icons.Material.Filled.CreditCard"
                               Disabled="@(!cartItems.Any())"
                               Size="Size.Large"
                               Class="mb-2">
                        Proceed to Checkout
                    </MudButton>
                    
                    <MudText Typo="Typo.caption" 
                             Align="Align.Center" 
                             Color="Color.Dark">
                        Secure checkout powered by our platform
                    </MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private CartItem[]? cartItems;
    private string? errorMessage;
    private bool isLoading = true;
    private Dictionary<int, string> quantityValues = new();
    
    private decimal subtotal => cartItems?.Sum(item => item.Product.Price * item.Quantity) ?? 0;
    private decimal tax => subtotal * 0.08m; // 8% tax
    private decimal total => subtotal + tax;

    protected override async Task OnInitializedAsync()
    {
        CartService.OnCartChanged += HandleCartChanged;
        await LoadCartItems();
    }

    private async Task LoadCartItems()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            cartItems = await CartService.GetCartItemsAsync();
            
            // Initialize quantity values
            quantityValues.Clear();
            if (cartItems != null)
            {
                foreach (var item in cartItems)
                {
                    quantityValues[item.Id] = item.Quantity.ToString();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load cart items. Please try again.";
            cartItems = [];
            Console.WriteLine($"Error loading cart items: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateQuantity(int itemId, int newQuantity)
    {
        if (newQuantity <= 0)
        {
            await RemoveItem(itemId);
            return;
        }

        try
        {
            await CartService.UpdateCartItemAsync(itemId, newQuantity);
            await LoadCartItems();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to update item quantity. Please try again.";
            Snackbar.Add("Failed to update quantity", Severity.Error);
            Console.WriteLine($"Error updating quantity: {ex.Message}");
            await LoadCartItems(); // Reload to reset state
        }
    }

    private async Task UpdateQuantityFromInput(int itemId, string quantityString)
    {
        if (int.TryParse(quantityString, out int newQuantity) && newQuantity > 0)
        {
            await UpdateQuantity(itemId, newQuantity);
        }
        else
        {
            // Reload to reset the value if invalid
            await LoadCartItems();
        }
    }

    private async Task RemoveItem(int itemId)
    {
        try
        {
            await CartService.RemoveFromCartAsync(itemId);
            await LoadCartItems();
            Snackbar.Add("Item removed from cart", Severity.Info);
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to remove item from cart. Please try again.";
            Snackbar.Add("Failed to remove item", Severity.Error);
            Console.WriteLine($"Error removing item: {ex.Message}");
        }
    }

    private async Task ClearCart()
    {
        try
        {
            await CartService.ClearCartAsync();
            await LoadCartItems();
            Snackbar.Add("Cart cleared", Severity.Info);
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to clear cart. Please try again.";
            Snackbar.Add("Failed to clear cart", Severity.Error);
            Console.WriteLine($"Error clearing cart: {ex.Message}");
        }
    }

    private async void HandleCartChanged()
    {
        await InvokeAsync(async () =>
        {
            await LoadCartItems();
        });
    }

    public void Dispose()
    {
        CartService.OnCartChanged -= HandleCartChanged;
    }
}