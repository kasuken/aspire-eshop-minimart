@page "/products"
@using aspire_eshop_minimart.Web
@using aspire_eshop_minimart.Web.Services
@using System.Web
@inject ProductApiClient ProductClient
@inject CategoryApiClient CategoryClient
@inject CartService CartService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>Products - Aspire eShop Minimart</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid AlignItems="Center.Center" Class="mb-4">
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h4">@GetPageTitle()</MudText>
        </MudItem>
        <MudItem xs="12" md="6" Class="text-right">
            @if (selectedCategory != null)
            {
                <MudButton Variant="Variant.Outlined" 
                           StartIcon="@Icons.Material.Filled.ArrowBack"
                           Href="/products"
                           Color="Color.Primary">
                    All Products
                </MudButton>
            }
        </MudItem>
    </MudGrid>

    <!-- Category Filter -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudText Typo="Typo.h6" Class="mb-3">Filter by Category</MudText>
        <MudGrid>
            <MudItem>
                <MudChip T="string" Variant="@(selectedCategoryId == null ? Variant.Filled : Variant.Outlined)"
                         Color="Color.Primary"
                         OnClick="() => NavigateToAllProducts()"
                         Class="ma-1">
                    All Categories
                </MudChip>
            </MudItem>
            @if (categories != null)
            {
                @foreach (var category in categories)
                {
                    <MudItem>
                        <MudChip T="string" Variant="@(selectedCategoryId == category.Id ? Variant.Filled : Variant.Outlined)"
                                 Color="Color.Primary"
                                 OnClick="() => NavigateToCategory(category.Id)"
                                 Class="ma-1">
                            @category.Name
                        </MudChip>
                    </MudItem>
                }
            }
        </MudGrid>
    </MudPaper>

    <!-- Products Grid -->
    @if (products == null)
    {
        <MudGrid Justify="Justify.Center" Class="pa-8">
            <MudItem Class="text-center">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                <MudText Typo="Typo.h6" Class="mt-4">Loading products...</MudText>
            </MudItem>
        </MudGrid>
    }
    else if (!products.Any())
    {
        <MudPaper Class="pa-8" Elevation="1">
            <MudGrid Justify="Justify.Center">
                <MudItem Class="text-center">
                    <MudIcon Icon="@Icons.Material.Filled.SearchOff" Style="font-size: 4rem;" Color="Color.Dark" />
                    <MudText Typo="Typo.h5" Color="Color.Dark" Class="mt-3">No products found</MudText>
                    <MudText Typo="Typo.body1" Color="Color.Dark">Try selecting a different category</MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
    else
    {
        <MudGrid>
            @foreach (var product in products)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="4" Class="product-card mud-elevation-hover" Style="height: 100%;">
                        @if (product.IsFeatured)
                        {
                            <div style="position: relative;">
                                <MudChip T="string" Size="Size.Small" 
                                         Color="Color.Warning" 
                                         Icon="@Icons.Material.Filled.Star"
                                         Style="position: absolute; top: 8px; left: 8px; z-index: 1;">
                                    Featured
                                </MudChip>
                            </div>
                        }
                        <MudCardMedia Image="@product.ImageUrl" Height="200" />
                        <MudCardContent Class="d-flex flex-column" Style="height: calc(100% - 200px);">
                            <div class="flex-grow-1">
                                <MudChip T="string" Size="Size.Small" 
                                         Color="Color.Secondary" 
                                         Variant="Variant.Outlined"
                                         Class="mb-2">
                                    @product.Category.Name
                                </MudChip>
                                <MudText Typo="Typo.h6" Class="mb-2">@product.Name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Dark" Class="mb-3">@product.Description</MudText>
                            </div>
                            <div>
                                <MudGrid AlignItems="Center.Center" Class="mb-3">
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.h5" Color="Color.Primary">$@product.Price.ToString("F2")</MudText>
                                    </MudItem>
                                    <MudItem xs="6" Class="text-right">
                                        <MudText Typo="Typo.caption" Color="Color.Dark">Stock: @product.StockQuantity</MudText>
                                    </MudItem>
                                </MudGrid>
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Primary" 
                                           FullWidth="true"
                                           StartIcon="@Icons.Material.Filled.AddShoppingCart"
                                           OnClick="() => AddToCart(product.Id)"
                                           Disabled="@(product.StockQuantity == 0 || isAddingToCart)"
                                           Size="Size.Small">
                                    @if (product.StockQuantity == 0)
                                    {
                                        <span>Out of Stock</span>
                                    }
                                    else if (isAddingToCart)
                                    {
                                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                    }
                                    else
                                    {
                                        <span>Add to Cart</span>
                                    }
                                </MudButton>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

<style>
    .product-card:hover {
        transform: translateY(-3px);
        transition: all 0.3s ease;
    }

    .mud-elevation-hover:hover {
        box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
    }
</style>

@code {
    private Product[]? products;
    private Category[]? categories;
    private Category? selectedCategory;
    private int? selectedCategoryId;
    private bool isAddingToCart = false;

    protected override async Task OnInitializedAsync()
    {
        // Get category from query string
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (int.TryParse(query["category"], out var categoryId))
        {
            selectedCategoryId = categoryId;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Load categories and products in parallel
            var categoriesTask = CategoryClient.GetCategoriesAsync();
            var productsTask = selectedCategoryId.HasValue 
                ? ProductClient.GetProductsByCategoryAsync(selectedCategoryId.Value)
                : ProductClient.GetProductsAsync();

            await Task.WhenAll(categoriesTask, productsTask);

            categories = await categoriesTask;
            products = await productsTask;

            if (selectedCategoryId.HasValue)
            {
                selectedCategory = categories?.FirstOrDefault(c => c.Id == selectedCategoryId.Value);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products data: {ex.Message}");
            Snackbar.Add("Failed to load products. Please try again.", Severity.Error);
            categories = [];
            products = [];
        }
    }

    private string GetPageTitle()
    {
        if (selectedCategory != null)
        {
            return $"{selectedCategory.Name} Products";
        }
        return "All Products";
    }

    private void NavigateToCategory(int categoryId)
    {
        Navigation.NavigateTo($"/products?category={categoryId}");
    }

    private void NavigateToAllProducts()
    {
        Navigation.NavigateTo("/products");
    }

    private async Task AddToCart(int productId)
    {
        if (isAddingToCart) return;
        
        try
        {
            isAddingToCart = true;
            StateHasChanged();
            
            await CartService.AddToCartAsync(productId, 1);
            Snackbar.Add("Product added to cart!", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding to cart: {ex.Message}");
            Snackbar.Add("Failed to add product to cart. Please try again.", Severity.Error);
        }
        finally
        {
            isAddingToCart = false;
            StateHasChanged();
        }
    }
}