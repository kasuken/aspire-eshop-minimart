@page "/products"
@using aspire_eshop_minimart.Web
@using aspire_eshop_minimart.Web.Services
@using System.Web
@inject ProductApiClient ProductClient
@inject CategoryApiClient CategoryClient
@inject CartService CartService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Products - Aspire eShop Minimart</PageTitle>

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@GetPageTitle()</h1>
        @if (selectedCategory != null)
        {
            <a href="/products" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left me-1"></i>
                All Products
            </a>
        }
    </div>

    <!-- Category Filter -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title mb-3">Filter by Category</h5>
                    <div class="d-flex flex-wrap gap-2">
                        <a href="/products" class="btn @(selectedCategoryId == null ? "btn-primary" : "btn-outline-primary") btn-sm">
                            All Categories
                        </a>
                        @if (categories != null)
                        {
                            @foreach (var category in categories)
                            {
                                <a href="/products?category=@category.Id" class="btn @(selectedCategoryId == category.Id ? "btn-primary" : "btn-outline-primary") btn-sm">
                                    @category.Name
                                </a>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Products Grid -->
    @if (products == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!products.Any())
    {
        <div class="text-center py-5">
            <i class="bi bi-search" style="font-size: 3rem; color: #6c757d;"></i>
            <h3 class="text-muted mt-3">No products found</h3>
            <p class="text-muted">Try selecting a different category</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var product in products)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                    <div class="card h-100 product-card">
                        @if (product.IsFeatured)
                        {
                            <div class="position-relative">
                                <span class="position-absolute top-0 start-0 badge bg-warning text-dark m-2">
                                    <i class="bi bi-star-fill me-1"></i>Featured
                                </span>
                            </div>
                        }
                        <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name" style="height: 200px; object-fit: cover;">
                        <div class="card-body d-flex flex-column">
                            <div class="mb-2">
                                <span class="badge bg-secondary">@product.Category.Name</span>
                            </div>
                            <h5 class="card-title">@product.Name</h5>
                            <p class="card-text text-muted small flex-grow-1">@product.Description</p>
                            <div class="mt-auto">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="h5 text-primary mb-0">$@product.Price.ToString("F2")</span>
                                    <small class="text-muted">Stock: @product.StockQuantity</small>
                                </div>
                                <button class="btn btn-primary btn-sm w-100" @onclick="() => AddToCart(product.Id)" disabled="@(product.StockQuantity == 0)">
                                    @if (product.StockQuantity == 0)
                                    {
                                        <span>Out of Stock</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-cart-plus me-1"></i>
                                        <span>Add to Cart</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .product-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
</style>

@code {
    private Product[]? products;
    private Category[]? categories;
    private Category? selectedCategory;
    private int? selectedCategoryId;

    protected override async Task OnInitializedAsync()
    {
        // Get category from query string
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (int.TryParse(query["category"], out var categoryId))
        {
            selectedCategoryId = categoryId;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Load categories and products in parallel
            var categoriesTask = CategoryClient.GetCategoriesAsync();
            var productsTask = selectedCategoryId.HasValue 
                ? ProductClient.GetProductsByCategoryAsync(selectedCategoryId.Value)
                : ProductClient.GetProductsAsync();

            await Task.WhenAll(categoriesTask, productsTask);

            categories = await categoriesTask;
            products = await productsTask;

            if (selectedCategoryId.HasValue)
            {
                selectedCategory = categories?.FirstOrDefault(c => c.Id == selectedCategoryId.Value);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products data: {ex.Message}");
            categories = [];
            products = [];
        }
    }

    private string GetPageTitle()
    {
        if (selectedCategory != null)
        {
            return $"{selectedCategory.Name} Products";
        }
        return "All Products";
    }

    private async Task AddToCart(int productId)
    {
        try
        {
            await CartService.AddToCartAsync(productId, 1);
            // You could add a toast notification here
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding to cart: {ex.Message}");
            // You could show an error message to the user
        }
    }
}