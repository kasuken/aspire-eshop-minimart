@page "/"
@using aspire_eshop_minimart.Web
@using aspire_eshop_minimart.Web.Services
@inject ProductApiClient ProductClient
@inject CategoryApiClient CategoryClient
@inject CartService CartService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>Home - Aspire eShop Minimart</PageTitle>

<!-- Hero Section -->
<MudPaper Elevation="3" Class="pa-6 mb-6" Style="background: linear-gradient(135deg, var(--mud-palette-primary) 0%, var(--mud-palette-primary-darken) 100%); color: white;">
    <MudGrid AlignItems="Center.Center">
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h2" Class="fw-bold mb-3">eShop Minimart</MudText>
            <MudText Typo="Typo.h5" Class="mb-4">Your one-stop shop for fresh groceries and everyday essentials</MudText>
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Secondary" 
                       Size="Size.Large" 
                       StartIcon="@Icons.Material.Filled.ShoppingBag"
                       Href="/products"
                       Class="text-white">
                Shop Now
            </MudButton>
        </MudItem>
        <MudItem xs="12" md="6" Class="text-center">
            <MudIcon Icon="@Icons.Material.Filled.Store" Style="font-size: 8rem;" />
        </MudItem>
    </MudGrid>
</MudPaper>

<!-- Categories Section -->
<MudContainer MaxWidth="MaxWidth.False" Class="mb-6">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Shop by Category</MudText>
    
    @if (categories == null)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem>
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                <MudText Typo="Typo.body1" Class="mt-2">Loading categories...</MudText>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudGrid>
            @foreach (var category in categories)
            {
                <MudItem xs="6" sm="4" md="2">
                    <MudCard Elevation="2" Class="category-card mud-elevation-hover" @onclick="() => NavigateToCategory(category.Id)" Style="cursor: pointer; height: 100%;">
                        <MudCardMedia Image="@category.ImageUrl" Height="120" />
                        <MudCardContent Class="pa-2">
                            <MudText Typo="Typo.subtitle1" Align="Align.Center">@category.Name</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

<!-- Featured Products Section -->
<MudContainer MaxWidth="MaxWidth.False" Class="mb-6">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Featured Products</MudText>
    
    @if (featuredProducts == null)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem>
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                <MudText Typo="Typo.body1" Class="mt-2">Loading featured products...</MudText>
            </MudItem>
        </MudGrid>
    }
    else if (!featuredProducts.Any())
    {
        <MudAlert Severity="Severity.Info" Class="mb-4">No featured products available.</MudAlert>
    }
    else
    {
        <MudGrid>
            @foreach (var product in featuredProducts)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="4" Class="product-card mud-elevation-hover" Style="height: 100%;">
                        <MudCardMedia Image="@product.ImageUrl" Height="200" />
                        <MudCardContent Class="d-flex flex-column" Style="height: calc(100% - 200px);">
                            <div class="flex-grow-1">
                                <MudText Typo="Typo.h6" Class="mb-2">@product.Name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Dark" Class="mb-3">@product.Description</MudText>
                            </div>
                            <div>
                                <MudGrid AlignItems="Center.Center" Class="mb-3">
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.h5" Color="Color.Primary">$@product.Price.ToString("F2")</MudText>
                                    </MudItem>
                                    <MudItem xs="6" Class="text-right">
                                        <MudText Typo="Typo.caption" Color="Color.Dark">Stock: @product.StockQuantity</MudText>
                                    </MudItem>
                                </MudGrid>
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Primary" 
                                           FullWidth="true"
                                           StartIcon="@Icons.Material.Filled.AddShoppingCart"
                                           OnClick="() => AddToCart(product.Id)"
                                           Disabled="@(product.StockQuantity == 0 || isAddingToCart)"
                                           Size="Size.Small">
                                    @if (product.StockQuantity == 0)
                                    {
                                        <span>Out of Stock</span>
                                    }
                                    else if (isAddingToCart)
                                    {
                                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                    }
                                    else
                                    {
                                        <span>Add to Cart</span>
                                    }
                                </MudButton>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

<style>
    .category-card:hover {
        transform: translateY(-5px);
        transition: all 0.3s ease;
    }

    .product-card:hover {
        transform: translateY(-3px);
        transition: all 0.3s ease;
    }

    .mud-elevation-hover:hover {
        box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
    }
</style>

@code {
    private Category[]? categories;
    private Product[]? featuredProducts;
    private bool isAddingToCart = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load categories and featured products in parallel
            var categoriesTask = CategoryClient.GetCategoriesAsync();
            var featuredProductsTask = ProductClient.GetFeaturedProductsAsync();

            await Task.WhenAll(categoriesTask, featuredProductsTask);

            categories = await categoriesTask;
            featuredProducts = await featuredProductsTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading home page data: {ex.Message}");
            Snackbar.Add("Failed to load data. Please refresh the page.", Severity.Error);
            categories = [];
            featuredProducts = [];
        }
    }

    private void NavigateToCategory(int categoryId)
    {
        Navigation.NavigateTo($"/products?category={categoryId}");
    }

    private async Task AddToCart(int productId)
    {
        if (isAddingToCart) return;
        
        try
        {
            isAddingToCart = true;
            StateHasChanged();
            
            await CartService.AddToCartAsync(productId, 1);
            Snackbar.Add("Product added to cart!", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding to cart: {ex.Message}");
            Snackbar.Add("Failed to add product to cart. Please try again.", Severity.Error);
        }
        finally
        {
            isAddingToCart = false;
            StateHasChanged();
        }
    }
}
